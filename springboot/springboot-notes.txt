Spring Boot is the tool provided by the Pivotal (sponsor of spring tool suite) for helping people get ready with projects up and running in a fast fashion.
To do so, the Spring Boot project provides the spring initializer which can used online, available on the URI "http://start.spring.io/" or via a command line tool, but the online version looks like better in the sense it is always up to date.

When starting a new project, specially for backend processing, thinking on RESTFul services is something which comes very soon.
So browse to "http://start.spring.io/" and select the initializer with the Build tool (Maven) and the desired language (Java), provide it a maven group alongside an artifact id, so from the list of dependencies, get all the starters which makes sense, so then click "Generate Project" to download the skeleton/base project.

Baby steps;
- generate the skeleton project from the online tool; http://start.spring.io/
  - provide a meaningfull group and artifact id
  - select only the "Web" dependencie/starter
  - pom.xml with the starters; spring-boot-starter-web, spring-boot-starter-test(scope=test)
- start the project to check whether it is getting up successfully; $ mvn spring-boot:run
- add jpa/database capability;
  - add dependency for the starter; spring-boot-starter-data-jpa
    - it gives the ability for;
      - jdbc capabilities
      - Spring JDBC
      - jpa with hibernate
  - it must be provided the jdbc driver for the database, for example; com.h2database:h2
- start the project to check whether it is getting up successfully; $ mvn spring-boot:run
- add devtools starter for facilities provided on "dev time", such as synchronization of artifacts (static or Java/dynamic ones) while they are being edited/developed; spring-boot-devtools
  - devtools is really a nice feature provided by Spring Boot which under the hoods, detects that the server is being loaded on "dev mode" (based on spring profiles), so based on that, spring loads different JVM for the server (e.g; Tomcat), and a separated classloaders for the libraries and another for application which holds the code being developed, so this way, whenever the code changes, the classloader for the application is basically reloaded getting the resulting rendered application up to date all the time, so there's no need to restart the server on each change, and that is the feature the developer needs.
    this mentioned behaviour is only for dev time
- start the project to check whether it is getting up successfully; $ mvn spring-boot:run
- begin the implementation with the artifacts which belongs to the application, Domains/Entities/Pojos, Services, Repositories, Controllers, etc.
  - business logic
  - data accesses
  - endpoints
  - GUI
- add non-functional requirements
  - spring security; spring-boot-starter-security
  - spring boot actuator; spring-boot-starter-actuator
  - define specific properties and values for each environment
    - check the details of each considered environment and set their properties and values, such as matrics with spring actuator, roles for spring security, etc.

Glossary;
[spring boot actuator]
  Spring Boot Actuators are well known for "production-ready features", and it means that some features that are supposed to be implemented by some developers of application are already available to these applications which makes use of this "dependency/library", which can be refered also to as spring boot starter.
  The aforementioned "production-ready features" are most of the time related to "monitoring" the application (whether the application and it's components are up and running), gather metrics, etc. Understanding traffic or the state of our database becomes trivial with this dependency.
  Imagine we could by means of spring boot actuator terminate our app or change its logging configurations, it is hugely powerfull and so cool.
  ...
    - https://www.baeldung.com/spring-boot-actuators - 
    The main benefit of this library is that we can get production grade tools without having to actually implement these features ourselves.
    Actuator is mainly used to expose operation information about the running application - health, metrics, info, dump, env, etc. It uses HTTP endpoints or JMX beans to enable us to interact with it.
  ...
  If we would develop this kind of features ourselves, we would implement something like JMX beans and endpoints to show both metrics and that our app still alive, but now Spring Boot does this out of the box, in a standard way which is even better.
  ...
    - https://www.baeldung.com/spring-boot-actuators - 
    Most common endpoints provided out of the box;
	    /auditevents – lists security audit-related events such as user login/logout. Also, we can filter by principal or type among others fields
	    /beans – returns all available beans in our BeanFactory. Unlike /auditevents, it doesn’t support filtering
	    /conditions – formerly known as /autoconfig, builds a report of conditions around auto-configuration
	    /configprops – allows us to fetch all @ConfigurationProperties beans
	    /env – returns the current environment properties. Additionally, we can retrieve single properties
	    /flyway – provides details about our Flyway database migrations
	    /health – summarises the health status of our application
	    /heapdump – builds and returns a heap dump from the JVM used by our application
	    /info – returns general information. It might be custom data, build information or details about the latest commit
	    /liquibase – behaves like /flyway but for Liquibase
	    /logfile – returns ordinary application logs
	    /loggers – enables us to query and modify the logging level of our application
	    /metrics – details metrics of our application. This might include generic metrics as well as custom ones
	    /prometheus – returns metrics like the previous one, but formatted to work with a Prometheus server
	    /scheduledtasks – provides details about every scheduled task within our application
	    /sessions – lists HTTP sessions given we are using Spring Session
	    /shutdown – performs a graceful shutdown of the application
	    /threaddump – dumps the thread information of the underlying JVM
    We can find the full list of existing endpoints over; http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#production-ready-endpoints
  ...
  Rich documentation for spring boot actuator, such as "retrieving and changing configurations for loggings"; https://docs.spring.io/spring-boot/docs/2.0.x/actuator-api/html/
	More on the topic <Magic #1: the Base Path Can Be Changed> <Magic #2: Health of the Application> <Magic #3: Custom Health Indicators> <Magic #4: Application Information With Info> <Magic #5: Metrics About the Application Environment>; https://dzone.com/articles/magic-with-spring-boot-actuator

[spring boot devtools]
[spring boot starters]
